<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd">

    <!--    подтягиваем креденшелы к нашей БД
        property-placeholder - распарсивает проперти файл и все ключи какие есть в файле
        мы можем напрямую использовать в наших бинах -->
    <context:property-placeholder location="classpath:db/postgres.properties" system-properties-mode="OVERRIDE"/>

    <!--
    For postgres driver logging
    It uses java.util.logging and logged via jul-to-slf4j bridge
    https://stackoverflow.com/a/27296470/548473
-->
    <bean class="org.springframework.beans.factory.config.MethodInvokingBean">
        <property name="staticMethod" value="org.slf4j.bridge.SLF4JBridgeHandler.install" />
    </bean>

    <jdbc:initialize-database data-source="dataSource" enabled="${database.init}">
<!--данный скрипт инициализирует базу-->
        <jdbc:script location="classpath:db/initDB.sql"/>
<!--        наполняем базу-->
        <jdbc:script encoding="utf-8" location="classpath:db/populateDB.sql"/>
    </jdbc:initialize-database>

    <!--dataSource - откуда будут браться Connection
    DriverManagerDataSource - на каждый запрос создает новый Connection и закрывает его
    Connection используется для соединения с БД-->
    <bean id="dataSource"
          class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="org.postgresql.Driver"/>
        <property name="url" value="${database.url}"/>
        <property name="username" value="${database.username}"/>
        <property name="password" value="${database.password}"/>
    </bean>

    <!--https://russianblogs.com/article/8053361678/
        Внедряем официальный инструментарий jdbcTemplate
        JdbcTemplate является центральным классом в базовом пакете JDBC.
        Он выполняет основной рабочий процесс JDBC, оставляя код приложения для предоставления SQL и извлечения результатов.   -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <constructor-arg ref="dataSource"/>
    </bean>

    <!--NamedParameterJdbcTemplate расширяет класс JdbcTemplate и инкапсулирует класс JdbcTemplate
        для поддержки функции именованных параметров    -->
    <bean id="namedJdbcTemplate" class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
        <constructor-arg ref="jdbcTemplate"/>
    </bean>
</beans>